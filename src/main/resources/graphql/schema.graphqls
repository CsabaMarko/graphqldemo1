# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
}

type Customer {
    birthDate: DateTime
    id: Int!
    name: String
}

type Product {
    id: Int!
    name: String
    price: BigDecimal
    sku: String
}

type Query {
    customerById(id: ID!): Customer
    customers(page: PositiveInt = 1, size: PositiveInt = 20): [Customer]
    dummy: String
    productById(id: ID!): Product
    products(page: PositiveInt = 1, size: PositiveInt = 20): [Product]
    userById(id: ID!): User
    users(filter: UserFilter, page: PositiveInt = 1, size: PositiveInt = 20): [User]
    changeRequests(filter: ChangeRequestFilter, page: PositiveInt = 1, size: PositiveInt = 20): [ChangeRequest]
    changeRequestById(id: ID!): ChangeRequest
}

type User {
    id: ID!
    snId: String
    firstName: String
    lastName: String
    middleName: String
    phone: String
    email: String
}

type ChangeRequest {
    id: ID!
    changeNumber: String
    shortDescription: String
    description: String
    active: Boolean
    type: String
    workStart: DateTime
    workEnd: DateTime
    timeWorkedHours: Int
    createdAt: DateTime
    updatedAt: DateTime
    assignedTo: User
    createdBy: User
    requestedBy: User
}

"An arbitrary precision signed decimal"
scalar BigDecimal

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

"An Int scalar that must be a positive value"
scalar PositiveInt

## Filters

input ChangeRequestFilter {
    id: StringExpression
    changeNumber: StringExpression
    shortDescription: StringExpression
    description: StringExpression
    active: BooleanExpression
    type: StringExpression
    workStart: DateTimeExpression
    workEnd: DateTimeExpression
    timeWorkedHours: IntExpression
    createdAt: DateTimeExpression
    updatedAt: DateTimeExpression
}

input UserFilter {
    id: StringExpression
    snId: StringExpression
    firstName: StringExpression
    lastName: StringExpression
    middleName: StringExpression
    phone: StringExpression
    email: StringExpression
}

input StringExpression {
    equals: String
    notEquals: String
    lessThan: String
    greaterThan: String
}

input BooleanExpression {
    equals: Boolean
}

input IntExpression {
    equals: Int
    notEquals: Int
    lessThan: Int
    greaterThan: Int
}

input DateTimeExpression {
    equals: DateTime
    notEquals: String
    lessThan: String
    greaterThan: String
}